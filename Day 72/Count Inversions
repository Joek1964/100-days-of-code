https://www.geeksforgeeks.org/problems/inversion-of-array-1587115620/1
class Solution {
public:
    void merge(long long arr[], long long l, long long m, long long r, long long& count) {
        long long n1 = m - l + 1;
        long long n2 = r - m;

        // Create temporary arrays
        long long left[n1];
        long long right[n2];

        // Copy data to temporary arrays
        for (long long i = 0; i < n1; i++) {
            left[i] = arr[i + l];
        }
        for (long long i = 0; i < n2; i++) {
            right[i] = arr[i + m + 1];
        }

        // Merge the temporary arrays back into arr[l..r]
        long long i = 0, j = 0, k = l;
        while (i < n1 && j < n2) {
            if (left[i] <= right[j]) {
                arr[k++] = left[i++];
            } else {
                arr[k++] = right[j++];
                count += n1 - i; // Count inversions
            }
        }

        // Copy the remaining elements of left[] and right[], if any
        while (i < n1) {
            arr[k++] = left[i++];
        }
        while (j < n2) {
            arr[k++] = right[j++];
        }
    }

    void mergeSort(long long arr[], long long l, long long r, long long& count) {
        if (l < r) {
            long long m = l + (r - l) / 2;
            mergeSort(arr, l, m, count);
            mergeSort(arr, m + 1, r, count);
            merge(arr, l, m, r, count);
        }
    }

    long long int inversionCount(long long arr[], long long n) {
        long long count = 0;
        mergeSort(arr, 0, n - 1, count);
        return count;
    }
};
