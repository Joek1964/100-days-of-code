class Solution {
public:
    int recur2(int n,vector<int>& nums,vector<int>&dp2){
        if(n<1)return 0;
        if(dp2[n]!=-1)return dp2[n];
        int take = nums[n] + recur2(n-2,nums,dp2);
        int nottake = 0 + recur2(n-1,nums,dp2);
        return dp2[n] = max(take,nottake);
    }
    int recur1(int n,vector<int>& nums,vector<int>&dp1){
        if(n<0)return 0;
        if(dp1[n]!=-1)return dp1[n];
        int take = nums[n] + recur1(n-2,nums,dp1);
        int nottake = 0 + recur1(n-1,nums,dp1);
        return dp1[n] = max(take,nottake);
    }
    int rob(vector<int>& nums) {
        int n = nums.size();
        if(n==1) return nums[0];
        vector<int>dp1(n,-1);
        vector<int>dp2(n,-1);
        int m1 = recur1(n-2,nums,dp1);
        int m2 = recur2(n-1,nums,dp2);
        return max(m1,m2);
    }
};
