class Solution {
public:
    int traverse(vector<vector<int>>&grid,vector<vector<bool>>&visited,int m,int n,int &ans,int &maxi){
        int x=0,y=0;
        for(int i =0;i<m;i++){
            for(int j =0;j<n;j++){
                if(grid[i][j]!=0 && visited[i][j]!=1){
                  recur(grid,visited,i,j,ans,maxi);
                }
            }
        }
   return (maxi == -1e8) ? 0 : maxi;
    }
    void recur(vector<vector<int>>&grid,vector<vector<bool>>&visited,int i,int j,int &ans,int &maxi){
        int m = grid.size();
        int n = grid[0].size();
        visited[i][j] =1;
        ans+=grid[i][j];
        // if(visited[i+1][j]!=1 && i+1<m && grid[i+1][j]!=0){
        //     recur(grid,visited,i+1,j,ans,maxi);
        // }
        if(i+1<m && !visited[i+1][j] && grid[i+1][j]!=0){
            recur(grid,visited,i+1,j,ans,maxi);
        }
        if(i-1>=0 && !visited[i-1][j] && grid[i-1][j]!=0){
            recur(grid,visited,i-1,j,ans,maxi);
        }
        if(j+1<n && !visited[i][j+1] && grid[i][j+1]!=0){
            recur(grid,visited,i,j+1,ans,maxi);
        }
        if(j-1>=0 && !visited[i][j-1] && grid[i][j-1]!=0){
            recur(grid,visited,i,j-1,ans,maxi);
        }
        maxi = max(ans,maxi);
        visited[i][j] =0;
        ans-=grid[i][j];
    }
    int getMaximumGold(vector<vector<int>>& grid) {
        int ans =0;
        int maxi =-1e8;
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>>visited(m,vector<bool>(n,0));
        
        return traverse(grid,visited,m,n,ans,maxi);
    }
};
