class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int ans=0;
        unordered_map<int,int>mp;
        mp[0]=1;
        vector<int>pf(nums.size());
        pf[0]=nums[0];
        for(int i =1;i<nums.size();i++){
            pf[i] = pf[i-1] + nums[i];
        }
// we always check frequence** of pf[i-1] because at there weill get to know the actaul (j-i+1) subarrays  bcauz pf[j]-pf[j-(lets say k)] =goal,so pf[j]-goal will give subarrays
        for(int i =0;i<nums.size();i++){
            if(mp.find(pf[i]-k)!=mp.end()){
                ans+=mp[pf[i]-k];
            }
            mp[pf[i]]++;
        }
        return ans;
    }
};
